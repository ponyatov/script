%{
#include "hpp.hpp"
Sym* module = new Sym("module",MODULE);	// translation unit container
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR
%token <o> LB RB LQ RQ LC RC
%token <o> EQ AT
%token <o> ADD SUB MUL DIV POW
%type <o> ex scalar list

%left EQ
%left ADD SUB
%left MUL DIV
%left POW
%left AT
%%
REPL	: | REPL ex			{ module->push($2); } ;
scalar	: SYM | NUM | STR ;
ex		: scalar
		| LB ex RB			{ $$=$2; }
		| LQ list RQ		{ $$=$2; }
		| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex ADD ex			{ $$=$2; $$->push($1); $$->push($3); }
		| ex DIV ex			{ $$=$2; $$->push($1); $$->push($3); }
;
list	:					{ $$=new List(); }
	 	| list ex			{ $$=$1; $$->push($2); }
;
%%
